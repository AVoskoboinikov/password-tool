function generateFancyPasswordV2(secret_1, secret_2, length) {
    var dictionary = [
            '=', // but 0 possibly will be never generated by 2^x mod 83

            'Q','W','E','R','T','Y','U','I','O','P','A','S','D',
            'F','G','H','J','K','L','Z','X','C','V','B','N','M',

            'q','w','e','r','t','y','u','i','o','p','a','s','d',
            'f','g','h','j','k','l','z','x','c','v','b','n','m',

            '1','2','3','4','5','6','7','8','9',

            '~','!','@','#','$','%','^','&','*','(',')','_','+',
            ',','.',':',';','?','[',']','-'
        ], // 83
        hash_complexity = 100000,
        password_length = Math.max(length, 10),
        password = [],
        hashedSecret_1,
        hashedSecret_2,
        primitive_root = 2; // 2 is primitive root for 83

    hashedSecret_1 = secret_1;
    hashedSecret_2 = secret_2;

    // this is used to increase generation time as defence against brute force
    for (var i=0; i<hash_complexity; i++) {
        hashedSecret_1 = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(hashedSecret_1));
        hashedSecret_2 = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(hashedSecret_2));
    }

    hashedSecret_1 = hashedSecret_1.split('');
    hashedSecret_2 = hashedSecret_2.split('');

    secret_1 = secret_1.split('');
    secret_2 = secret_2.split('');

    var stats = {
        number: [],
        lower: [],
        upper: [],
        special: [],
    };

    for (i=0; i<password_length; i++) {
        var hashChar_1, hashChar_2,
            secretChar_1, secretChar_2,
            code;

        hashChar_1 = hashedSecret_1[i % hashedSecret_1.length];
        hashChar_2 = hashedSecret_2[i % hashedSecret_2.length];

        secretChar_1 = secret_1[i % secret_1.length];
        secretChar_2 = secret_2[i % secret_2.length];

        code = bigInt(primitive_root)
            .modPow(
                bigInt(hashChar_1.charCodeAt(0) % secretChar_1.charCodeAt(0))
                    .pow(hashChar_2.charCodeAt(0) % secretChar_2.charCodeAt(0)) + i,
                dictionary.length
            );

        if (isNumber(dictionary[code])) {
            stats.number.push(i)
        }

        if (isLowerCase(dictionary[code])) {
            stats.lower.push(i)
        }

        if (isUpperCase(dictionary[code])) {
            stats.upper.push(i)
        }

        if (isSpecialChar(dictionary[code])) {
            stats.special.push(i)
        }

        password.push(dictionary[code]);
    }

    [password, stats] = enforceNumber(password, stats);
    [password, stats] = enforceUpper(password, stats);
    [password, stats] = enforceLower(password, stats);
    [password, stats] = enforceSpecial(password, stats);

    return password.join('');
}

function isNumber(char) {
    var dictionary = ['1','2','3','4','5','6','7','8','9'];
    return dictionary.includes(char)
}

function getNumberForReplacement(pos) {
    var dictionary = ['1','2','3','4','5','6','7'];
    var code = bigInt(3).modPow(pos, dictionary.length);

    return dictionary[code]
}

function enforceNumber(password, stats) {
    if (stats.number.length === 0) {
        r = getPositionToReplace(stats);

        pos = r[0];
        stats = r[1];

        char = getNumberForReplacement(pos);
        password[pos] = char;

        stats.number.push(pos);
    }

    return [password, stats]
}

function isUpperCase(char) {
    var dictionary = [
        'Q','W','E','R','T','Y','U','I','O','P','A','S','D',
        'F','G','H','J','K','L','Z','X','C','V','B','N','M',
    ];
    return dictionary.includes(char)
}

function getUpperForReplacement(pos) {
    var dictionary = [
        'Q','W','E','R','T','Y','U','I','O','P','A',
        'F','G','H','J','K','L','Z','X','C','V','B','M',
    ]; // 23
    var code = bigInt(5).modPow(pos, dictionary.length);

    return dictionary[code]
}

function enforceUpper(password, stats) {
    if (stats.upper.length === 0) {
        r = getPositionToReplace(stats);

        pos = r[0];
        stats = r[1];

        char = getUpperForReplacement(pos);
        password[pos] = char;

        stats.upper.push(pos);
    }

    return [password, stats]
}


function isLowerCase(char) {
    var dictionary = [
        'q','w','e','r','t','y','u','i','o','p','a','s','d',
        'f','g','h','j','k','l','z','x','c','v','b','n','m',
    ];
    return dictionary.includes(char)
}

function getLowerForReplacement(pos) {
    var dictionary = [
        'q','w','e','r','t','y','o','p','a','s','d',
        'f','g','h','j','k','z','x','c','v','b','n','m',
    ]; // 23
    var code = bigInt(5).modPow(pos, dictionary.length);

    return dictionary[code]
}

function enforceLower(password, stats) {
    if (stats.lower.length === 0) {
        r = getPositionToReplace(stats);

        pos = r[0];
        stats = r[1];

        char = getLowerForReplacement(pos);
        password[pos] = char;

        stats.lower.push(pos);
    }

    return [password, stats]
}

function isSpecialChar(char) {
    var dictionary = [
        '~','!','@','#','$','%','^','&','*','(',')','_','+',
        ',','.',':',';','?','[',']','-',
    ];
    return dictionary.includes(char)
}

function getSpecialForReplacement(pos) {
    var dictionary = [
        '~','!','@','#','$','%','^','&','*','(',')',
        ',','.',':',';','?','[',']','-',
    ]; // 19
    var code = bigInt(2).modPow(pos, dictionary.length);

    return dictionary[code]
}

function enforceSpecial(password, stats) {
    if (stats.special.length === 0) {
        r = getPositionToReplace(stats);

        pos = r[0];
        stats = r[1];

        char = getSpecialForReplacement(pos);
        password[pos] = char;

        stats.special.push(pos);
    }

    return [password, stats]
}

function getPositionToReplace(stats) {
    if (
        stats.number.length > 0
        && stats.number.length >= stats.lower.length
        && stats.number.length >= stats.upper.length
        && stats.number.length >= stats.special.length
    ) {
        key = stats.number.pop();
        return [key, stats]
    }

    if (
        stats.lower.length > 0
        && stats.lower.length >= stats.number.length
        && stats.lower.length >= stats.upper.length
        && stats.lower.length >= stats.special.length
    ) {
        key = stats.lower.pop();
        return [key, stats]
    }

    if (
        stats.upper.length > 0
        && stats.upper.length >= stats.lower.length
        && stats.upper.length >= stats.number.length
        && stats.upper.length >= stats.special.length
    ) {
        key = stats.upper.pop();
        return [key, stats]
    }

    key = stats.special.pop();
    return [key, stats]
}
